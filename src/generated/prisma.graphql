# source: https://eu1.prisma.sh/twigbit/userservice/dev
# timestamp: Wed Aug 15 2018 13:58:42 GMT+0200 (Central European Summer Time)

type AggregateUser {
  count: Int!
}

type AggregateUserPreferences {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createUserPreferences(data: UserPreferencesCreateInput!): UserPreferences!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyUserPreferenceses(data: UserPreferencesUpdateInput!, where: UserPreferencesWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyUserPreferenceses(where: UserPreferencesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  userPreferenceses(where: UserPreferencesWhereInput, orderBy: UserPreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPreferences]!
  user(where: UserWhereUniqueInput!): User
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userPreferencesesConnection(where: UserPreferencesWhereInput, orderBy: UserPreferencesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPreferencesConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userPreferences(where: UserPreferencesSubscriptionWhereInput): UserPreferencesSubscriptionPayload
}

type User implements Node {
  id: ID!
  uid: String!
  name: String
  slug: String
  roles: [UserRole!]!
  preferences(where: UserPreferencesWhereInput): UserPreferences!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  uid: String!
  name: String
  slug: String
  roles: UserCreaterolesInput
  preferences: UserPreferencesCreateOneInput!
}

input UserCreaterolesInput {
  set: [UserRole!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  uid_ASC
  uid_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreferences {
  subscribeNewsletter: Boolean!
}

"""A connection to a list of items."""
type UserPreferencesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPreferencesEdge]!
  aggregate: AggregateUserPreferences!
}

input UserPreferencesCreateInput {
  subscribeNewsletter: Boolean
}

input UserPreferencesCreateOneInput {
  create: UserPreferencesCreateInput
}

"""An edge in a connection."""
type UserPreferencesEdge {
  """The item at the end of the edge."""
  node: UserPreferences!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserPreferencesOrderByInput {
  subscribeNewsletter_ASC
  subscribeNewsletter_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreferencesPreviousValues {
  subscribeNewsletter: Boolean!
}

type UserPreferencesSubscriptionPayload {
  mutation: MutationType!
  node: UserPreferences
  updatedFields: [String!]
  previousValues: UserPreferencesPreviousValues
}

input UserPreferencesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPreferencesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPreferencesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPreferencesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserPreferencesWhereInput
}

input UserPreferencesUpdateDataInput {
  subscribeNewsletter: Boolean
}

input UserPreferencesUpdateInput {
  subscribeNewsletter: Boolean
}

input UserPreferencesUpdateOneInput {
  create: UserPreferencesCreateInput
  delete: Boolean
  update: UserPreferencesUpdateDataInput
  upsert: UserPreferencesUpsertNestedInput
}

input UserPreferencesUpsertNestedInput {
  update: UserPreferencesUpdateDataInput!
  create: UserPreferencesCreateInput!
}

input UserPreferencesWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPreferencesWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPreferencesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPreferencesWhereInput!]
  subscribeNewsletter: Boolean

  """All values that are not equal to given value."""
  subscribeNewsletter_not: Boolean
}

type UserPreviousValues {
  id: ID!
  uid: String!
  name: String
  slug: String
  roles: [UserRole!]!
}

enum UserRole {
  USER
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  uid: String
  name: String
  slug: String
  roles: UserUpdaterolesInput
  preferences: UserPreferencesUpdateOneInput
}

input UserUpdaterolesInput {
  set: [UserRole!]
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  uid: String

  """All values that are not equal to given value."""
  uid_not: String

  """All values that are contained in given list."""
  uid_in: [String!]

  """All values that are not contained in given list."""
  uid_not_in: [String!]

  """All values less than the given value."""
  uid_lt: String

  """All values less than or equal the given value."""
  uid_lte: String

  """All values greater than the given value."""
  uid_gt: String

  """All values greater than or equal the given value."""
  uid_gte: String

  """All values containing the given string."""
  uid_contains: String

  """All values not containing the given string."""
  uid_not_contains: String

  """All values starting with the given string."""
  uid_starts_with: String

  """All values not starting with the given string."""
  uid_not_starts_with: String

  """All values ending with the given string."""
  uid_ends_with: String

  """All values not ending with the given string."""
  uid_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  preferences: UserPreferencesWhereInput
}

input UserWhereUniqueInput {
  id: ID
  uid: String
}
